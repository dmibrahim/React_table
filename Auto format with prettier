
"@typescript-eslint/ts-nocheck": "off", // Disable error for @ts-nocheck comments
        "no-warning-comments": [
            "warn",
            { "terms": ["eslint-disable-next-line"], "location": "start" } // Handle eslint-disable-next-line comments
        ]





To run ESLint and apply Prettier formatting automatically, you can set up scripts in your package.json and use tools like husky and lint-staged to ensure that code is linted and formatted before commits

module.exports = {
  // The line length that the printer will wrap on.
  printWidth: 80,

  // Specify the number of spaces per indentation-level.
  tabWidth: 2,

  // Indent lines with tabs instead of spaces.
  useTabs: false,

  // Print semicolons at the ends of statements.
  semi: true,

  // Use single quotes instead of double quotes.
  singleQuote: true,

  // Change when properties in objects are quoted.
  quoteProps: 'as-needed',

  // Use single quotes instead of double quotes in JSX.
  jsxSingleQuote: false,

  // Print trailing commas wherever possible when multi-line.
  trailingComma: 'es5',

  // Print spaces between brackets in object literals.
  bracketSpacing: true,

  // Put the `>` of a multi-line JSX element at the end of the last line
  // instead of being alone on the next line (does not apply to self closing elements).
  jsxBracketSameLine: false,

  // Include parentheses around a sole arrow function parameter.
  arrowParens: 'always',

  // Format only a segment of a file.
  rangeStart: 0,
  rangeEnd: Infinity,

  // Specify which parser to use.
  parser: undefined,

  // Specify the file name to use to infer which parser to use.
  filepath: undefined,

  // Require either '@prettier' or '@format' to be present in the file's first docblock comment
  // in order for it to be formatted.
  requirePragma: false,

  // Insert '@format' pragma into the file's first docblock comment.
  insertPragma: false,

  // By default, Prettier will wrap markdown text as-is since some services use a linebreak-sensitive renderer,
  // e.g. GitHub comment and BitBucket. In some cases you may want to rely on your editor/viewer soft wrapping
  // instead, so this option allows you to opt out with "never".
  proseWrap: 'preserve',

  // Specify the global whitespace sensitivity for HTML files.
  htmlWhitespaceSensitivity: 'css',

  // Whether or not to indent the code inside <script> and <style> tags in Vue files.
  vueIndentScriptAndStyle: false,

  // End of line setting.
  endOfLine: 'lf',

  // Control whether Prettier formats quoted code embedded in the file.
  embeddedLanguageFormatting: 'auto',
};


JSON FORMAT (.prettierrc.json)

{
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "semi": true,
  "singleQuote": true,
  "quoteProps": "as-needed",
  "jsxSingleQuote": false,
  "trailingComma": "es5",
  "bracketSpacing": true,
  "jsxBracketSameLine": false,
  "arrowParens": "always",
  "rangeStart": 0,
  "rangeEnd": Infinity,
  "requirePragma": false,
  "insertPragma": false,
  "proseWrap": "preserve",
  "htmlWhitespaceSensitivity": "css",
  "vueIndentScriptAndStyle": false,
  "endOfLine": "lf",
  "embeddedLanguageFormatting": "auto"
}


"format": "prettier --write 'src/**/*.{js,jsx,ts,tsx,json,css,scss,md}'",
    "lint-and-format": "npm run lint -- --fix && npm run format"
