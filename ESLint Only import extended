module.exports = {
  parser: '@babel/eslint-parser',
  parserOptions: {
    ecmaVersion: 2021,
    sourceType: 'module',
    ecmaFeatures: {
      jsx: true,
    },
  },
  env: {
    browser: true,
    es2021: true,
    node: true,
  },
  plugins: [
    'jsx-control-statements',
    'testing-library',
    'unicorn',
    'react',
    'react-hooks',
    'jsx-a11y',
    'import',
  ],
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:jsx-a11y/recommended',
    'plugin:testing-library/react',
    'plugin:unicorn/recommended',
    'plugin:import/errors',
    'plugin:import/warnings',
    'plugin:import/typescript',
  ],
  rules: {
    // Enforce a convention in module import order
    'import/order': [
      'error',
      {
        groups: [
          ['builtin', 'external', 'internal'],
          ['parent', 'sibling', 'index'],
          ['type'],
        ],
        'newlines-between': 'always',
        alphabetize: {
          order: 'asc', /* "asc" | "desc" */
          caseInsensitive: true /* true | false */
        },
        pathGroups: [
          {
            pattern: 'react',
            group: 'external',
            position: 'before',
          },
          {
            pattern: 'components/**',
            group: 'internal',
            position: 'after',
          },
        ],
        pathGroupsExcludedImportTypes: ['react'],
        distinctGroup: false,
        warnOnUnassignedImports: true,
      },
    ],
    // Disallow unresolved imports
    'import/no-unresolved': [
      'error',
      {
        commonjs: true,
        caseSensitive: true,
        caseSensitiveStrict: false,
        ignore: ['^@env$'], /* regex patterns to ignore */
      },
    ],
    // Forbid the use of extraneous packages. Forbid import of packages not listed in the package.json's dependencies, devDependencies, optionalDependencies, or peerDependencies
    'import/no-extraneous-dependencies': [
      'error',
      {
        devDependencies: [
          '**/__tests__/**', // Unit tests
          '**/__mocks__/**', // Mocks
          '**/test/**', // Test scripts
          '**/tests/**', // Test files
          '**/*.test.js', // Test files with .test.js suffix
          '**/*.spec.js', // Test files with .spec.js suffix
          '**/jest.config.js', // Jest config
          '**/jest.setup.js', // Jest setup
          '**/webpack.config.js', // Webpack config
          '**/webpack.config.*.js', // Webpack config with multiple files
          '**/rollup.config.js', // Rollup config
          '**/rollup.config.*.js', // Rollup config with multiple files
          '**/gulpfile.js', // Gulp config
          '**/gulpfile.*.js', // Gulp config with multiple files
          '**/Gruntfile{,.js}', // Grunt config
          '**/protractor.conf.js', // Protractor config
          '**/protractor.conf.*.js', // Protractor config with multiple files
        ],
        optionalDependencies: false,
        peerDependencies: false,
        bundledDependencies: false,
        packageDir: './', // Can be a string or an array of paths
      },
    ],
    // Report modules without exports, or exports without matching import in another module
    'import/no-unused-modules': [
      'error',
      {
        ignoreExports: ['src/main.js'], // Paths to ignore
        missingExports: true, // Report modules without any exports
        unusedExports: true, // Report exports without any usage
      },
    ],
    // Disable all other rules
    'jsx-control-statements/jsx-use-if-tag': 'off',
    'testing-library/no-container': 'off',
    'testing-library/no-node-access': 'off',
    'unicorn/filename-case': 'off',
    'prefer-arrow-callback': 'off',
    'prefer-const': 'off',
    'no-var': 'off',
    'object-shorthand': 'off',
    'prefer-template': 'off',
    'react-hooks/rules-of-hooks': 'off',
    'react-hooks/exhaustive-deps': 'off',
    'react/no-unused-state': 'off',
    'react/jsx-key': 'off',
    'react/no-deprecated': 'off',
    'react/no-direct-mutation-state': 'off',
    'react/no-typos': 'off',
    'react/no-unsafe': 'off',
    'jsx-a11y/anchor-is-valid': 'off',
    'jsx-a11y/no-autofocus': 'off',
    'unicorn/prevent-abbreviations': 'off',
  },
  settings: {
    react: {
      version: 'detect',
    },
    'import/resolver': {
      node: {
        extensions: ['.js', '.jsx', '.ts', '.tsx'],
      },
    },
  },
};
Explanation of Configurations
import/order: Enforce a convention in module import order.

groups: Specifies how imports should be grouped (builtin, external, internal, etc.).
newlines-between: Enforces newlines between groups.
alphabetize: Enforces alphabetical order within import groups.
pathGroups: Defines specific patterns and how they should be grouped.
pathGroupsExcludedImportTypes: Excludes certain import types from path groups.
distinctGroup: If true, each group will have its own section.
warnOnUnassignedImports: If true, will warn on unassigned imports.
import/no-unresolved: Disallow unresolved imports.

commonjs: If true, it will check CommonJS require calls.
caseSensitive: If true, import paths must match exactly in case.
caseSensitiveStrict: Even stricter case sensitivity.
ignore: Allows specifying regex patterns to ignore certain imports.
import/no-extraneous-dependencies: Forbid the use of extraneous packages. Forbid import of packages not listed in the package.json's dependencies, devDependencies, optionalDependencies, or peerDependencies.

devDependencies, optionalDependencies, peerDependencies, bundledDependencies: Determines which types of dependencies are allowed.
packageDir: Allows specifying where package.json is located.
import/no-unused-modules: Report modules without exports, or exports without matching import in another module.

ignoreExports: Files to ignore when checking for unused modules.
missingExports: If true, it will report modules without exports.
unusedExports: If true, it will report unused exports.
This configuration ensures that all plugin:import rules are fully documented with comments while other plugin rules are included but turned off.
